%load_ext autoreload
%autoreload 2

import pandas as pd
from mass_flow_model.imperative_model import *
from mass_flow_model.load_from_rdf import *

from rdflib import Namespace
from probs_runner import probs_endpoint

rdf_data_path = "../system-definitions/_build/probs_rdf/output.ttl"
ukf_data_path = "../datasources/ukfires-production-system/output.ttl"
model_def_path = "model.ttl"

MODEL_NS = Namespace("http://c-thru.org/analyses/calculator/model/")
model_uri = MODEL_NS["Model"]

with probs_endpoint([rdf_data_path, ukf_data_path, model_def_path]) as rdfox:
    model, recipe_data = query_model_from_endpoint(rdfox, model_uri)

demand_symbols = {
    "Urea": sy.Symbol("Z_1"),
    "AmmoniumNitrate": sy.Symbol("Z_2"),
}
h2_coal_fraction = sy.Symbol("a_1")

builder = ModelBuilder(model)
builder.pull_production(
    "Urea", demand_symbols["Urea"], until_objects=["CO2"],
    allocate_backwards={
        "Hydrogen": {
            "HydrogenSynthesisFromCoal": h2_coal_fraction,
            "HydrogenSynthesisFromNaturalGas": 1 - h2_coal_fraction,
        },
    }
)
builder.pull_production(
    "AmmoniumNitrate", demand_symbols["AmmoniumNitrate"], until_objects=["CO2"],
    allocate_backwards={
        "Hydrogen": {
            "HydrogenSynthesisFromCoal": h2_coal_fraction,
            "HydrogenSynthesisFromNaturalGas": 1 - h2_coal_fraction,
        },
    }
)
# builder.pull_production("P2", demand2, until_objects=["PP", "PE"])
# builder.push_consumption("EOL", eol, until_objects=["Recovered"])
# builder.balance_production(
#     "PE",
#     "Recycling",
#     limit=[
#         ("production", "Recovered"),
#     ]
# )
builder.balance_production("CO2", "ExtractCO2FromAtmosphere")
# builder.balance_production("PP", "SC2")
# builder.balance_consumption(
#     "Recovered",
#     "Disposal",
# )

builder.balance_consumption("Urea", "UseOfUreaFertiliser")

builder.fill_blanks(fill_value=0)

# def subs_dict(d, values):
#     return {k: v.subs(values) for k, v in d.items()}

def solution_to_flows(m, values):
    all_values = {**recipe_data, **values}
    return m.to_flows(all_values)


flows_sym = model.to_flows(recipe_data)

post = {
    "NG demand": flows_sym.query("source == 'NaturalGas'")["value"].sum(),
    "CO2": flows_sym.query("target == 'AtmosphericCO2'")["value"].sum(),
}

# emissions = {
#     "Urea": flows_sym.
# }
